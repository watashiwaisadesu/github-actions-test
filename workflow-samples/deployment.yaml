name: CI/CD FastAPI App

on:
  push:
    branches:
      - master # This workflow runs when you push to the 'master' branch

jobs:
  # --- Job 1: Linting ---
  lint:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Action to check out your repository code

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10.12' # Specify the Python version for linting

    - name: Install dependencies for Linting
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Install all dependencies including flake8
        echo "Dependencies installed on GitHub Actions runner for linting."

    - name: Run Linter (Flake8)
      run: |
        echo "Running Flake8 linter..."
        # Exclude venv and common build artifacts
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,.git,__pycache__

  # --- Job 2: Testing ---
  test:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: lint # This job depends on the 'lint' job. It will only run if 'lint' succeeds.

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Action to check out your repository code

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10.12' # Specify the Python version for testing

    - name: Install dependencies for Testing
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Install all dependencies including pytest and httpx
        echo "Dependencies installed on GitHub Actions runner for testing."

    - name: Run Tests (Pytest)
      run: |
        echo "Running Pytest..."
        pytest # Runs all tests found by Pytest

  # --- Job 3: Deployment ---
  deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: [lint, test] # This job depends on both 'lint' and 'test' jobs. It will only run if BOTH succeed.

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Action to check out your repository code
      # Note: Python setup and dependency install on the runner are not strictly
      # necessary here for direct SSH deployment, as they are handled on the remote server.
      # However, if you had any build artifacts to prepare on the runner before sending,
      # you would include those steps here.

    - name: Deploy to Remote Server
      uses: appleboy/ssh-action@v1.0.0 # Use the SSH action
      with:
        host: ${{ secrets.SERVER_IP }}        # Your server's IP address (store as a GitHub Secret)
        username: ${{ secrets.SERVER_USERNAME }} # Your SSH username on the server (store as a GitHub Secret)
        key: ${{ secrets.SSH_PRIVATE_KEY }}    # The private key you stored as a secret
        port: 61131                            # Your custom SSH port
        script: |
          # Define your application's target directory on the server
          APP_DIR="/home/${{ secrets.SERVER_USERNAME }}/server_files/test_repos/github-actions-test"
          REPO_URL="https://github.com/${{ github.repository }}.git" # Automatically gets your repo URL

          echo "Attempting to deploy to $APP_DIR"

          # Check if the .git directory exists inside the app directory.
          # If it doesn't, it means the repo hasn't been cloned yet.
          if [ ! -d "$APP_DIR/.git" ]; then
            echo "Application directory not found or not a Git repo. Cloning '$REPO_URL' into '$APP_DIR'..."
            mkdir -p "$APP_DIR" # Ensure the parent directory exists if needed
            git clone "$REPO_URL" "$APP_DIR"
            cd "$APP_DIR"
          else
            echo "Application directory found. Pulling latest changes for branch 'master'..."
            cd "$APP_DIR"
            # Ensure you're on the correct branch before pulling
            git checkout master
            git pull origin master # Pull from 'master' branch
          fi

          echo "Deployment directory: $(pwd)"

          # Check if Uvicorn is already running on port 8006 and kill it
          if sudo lsof -i :8006 -t; then
            echo "Killing existing process on port 8006..."
            sudo lsof -i :8006 -t | xargs sudo kill -9
            echo "Process killed."
          else
            echo "No process found on port 8006."
          fi

          # Install/Re-install dependencies on the server in a virtual environment
          echo "Setting up virtual environment and installing/updating dependencies on server..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
            echo "Virtual environment 'venv' created."
          fi
          source venv/bin/activate # Activate the virtual environment
          pip install -r requirements.txt
          echo "Dependencies installed in virtual environment."

          # Start Uvicorn in the background using nohup
          # The virtual environment is already activated by 'source venv/bin/activate'
          echo "Starting FastAPI app with Uvicorn on port 8006..."
          nohup uvicorn main:app --host 0.0.0.0 --port 8006 > app.log 2>&1 &
          echo "FastAPI app started in background. Check app.log for output."